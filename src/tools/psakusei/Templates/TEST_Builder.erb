<%- . ($config.Templates + "/_Utilities.ps1") -%>
<%- $config.OutFile = "Builders/$builder.cs" -%>
using System;
using FluentBuilders.Core;
using <%= $config.Namespace -replace 'Tests$', 'Common' %>.Models;

namespace <%= $config.Namespace %>
{
    ///	<summary>
    ///
    ///	</summary>
    public class <%= $builder %> : Builder<<%= $class_name %>>
    {
        #region Methods

        public static implicit operator <%= $class_name %>(<%= $builder %> builder)
        {
            return builder.Create();
        }

        public <%= $collection %> CreateCollection(int count = 5)
        {
            <%= $collection %> collection = new <%= $collection %>(CreateMany(count));
            
            return collection;
        }

        public override <%= $class_name %> Create(int seed = 1)
        {
            return base.Create(seed);
        }

        protected override <%= $class_name %> Build(int seed)
        {
            <%= $class_name %> <%= $var_name %> = new <%= $class_name %>()
            {
                <%= $columns | ForEach-Object { "$($_.Name | Pascal) = OptInFor(x => x.$($_.Name | Pascal), () => default($($_ | CsType)))" } | Combine -Sep ",`n$(' '*16)" %>
            };

            return <%= $var_name %>;
        }

        #endregion

        #region Properties
        
        <%- foreach ($c in $columns) { -%>
        //public <%= $builder %> With<%= $c.Name | Pascal %>(<%= $c | CsType %> <%= $c.Name | Camel %>)
        //{
        //    OptInWith(x => x.<%= $c.Name | Pascal %>, <%= $c.Name | Camel %>);
        //
        //    return this;
        //}
        
        <%- } -%>
        #endregion
    }
}