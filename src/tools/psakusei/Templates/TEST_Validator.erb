<%- . ($config.Templates + "/_Utilities.ps1") -%>
<%- $config.OutFile = "Common/Validators/$($validator)Tests.cs" -%>
using System;
using System.Collections.Generic;
using System.Linq;
using FluentValidation.TestHelper;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using <%= $common_ns %>.Models;
using <%= $common_ns %>.Validators;

namespace <%= $config.Namespace %>.Core.Validators
{
    [TestClass]
    public class <%= $validator %>Tests
    {
        #region Members

        private <%= $validator %> SubjectUnderTest;

        [TestInitialize]
        public void TestInitialize()
        {
            SubjectUnderTest = new <%= $validator %>();
        }

        #endregion
        
        #region Validation Rule Tests

        <%- foreach ($c in $columns) { -%>
        [TestMethod]
        public void <%= $validator %>_RuleFor_<%= $c.Name | Pascal %>()
        {
            var <%= $var_name %> = new <%= $class_name %>();

            <%= $var_name %>.<%= $c.Name | Pascal %> = default(<%= $c | CsType %>);
            SubjectUnderTest.ShouldNotHaveValidationErrorFor(v => v.<%= $c.Name | Pascal %>, <%= $var_name %>);
            <% if (($c | CsType) -eq 'string') { %>
            <%= $var_name %>.<%= $c.Name | Pascal %> = "";
            SubjectUnderTest.ShouldHaveValidationErrorFor(v => v.<%= $c.Name | Pascal %>, <%= $var_name %>);
            
            <%= $var_name %>.<%= $c.Name | Pascal %> = new string('0', <%= $c.Length %>);
            SubjectUnderTest.ShouldNotHaveValidationErrorFor(v => v.<%= $c.Name | Pascal %>, <%= $var_name %>);
            
            <%= $var_name %>.<%= $c.Name | Pascal %> = new string('0', <%= $c.Length %> + 1);
            SubjectUnderTest.ShouldHaveValidationErrorFor(v => v.<%= $c.Name | Pascal %>, <%= $var_name %>);
            <% } %>
        }
        
        <%- } -%>
        #endregion
    }
}