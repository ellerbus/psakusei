<%- . ($config.Templates + "/_Utilities.ps1") -%>
<%- $config.OutFile = "Models/$class_name.cs" -%>
using System;
using System.Diagnostics;
using Augment;
using Insight.Database;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace <%= $config.Namespace %>.Models
{
    ///	<summary>
    ///
    ///	</summary>
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    public class <%= $class_name %>
    {
        #region Constructors

        public <%= $class_name %>() { }
        
		[SqlConstructor]
        public <%= $class_name %>(<%= $columns | ForEach-Object { "$($_ | CsType) $($_.Name | Camel)" } | Combine -Sep ", " %>)
        {
            <%= $columns | ForEach-Object { "_$($_.Name | Camel) = $($_.Name | Camel);" } | Combine -Sep "`n$(' '*12)" %>
        }
        
        #endregion

        #region ToString/DebuggerDisplay

        public override string ToString()
        {
            return DebuggerDisplay;
        }

        ///	<summary>
        ///	DebuggerDisplay for this object
        ///	</summary>
        private string DebuggerDisplay
        {
            get
            {
                string pk = "[" + <%= $primary_keys | ForEach-Object { $_.Name | Pascal } | Combine -Sep ", " %>;
                
                string uq = "[" + <%= $unique_keys | ForEach-Object { $_.Name | Pascal } | Combine -Sep ", " %>;
                
                return "{0}, pk={1}, uq={2}".FormatArgs(GetType().Name, pk, uq);
            }
        }
        
        #endregion

        #region Misc Properties
        
        ///	<summary>
        ///	Internally Managed 'Is' Modified Flag to reduce 'Save' traffic
        ///	</summary>
        public bool IsModified { get; internal set; }
        
        #endregion

        #region Properties
        <%- foreach ($column in $columns) { -%>

        ///	<summary>
        ///	Gets / Sets database column '<%= $column.Name %>'
        ///	</summary>
        [Column("<%= $column.Name %>")]
        public virtual <%= $column | CsType %> <%= $column.Name | Pascal %>
        {
            get { return _<%= $column.Name | Camel %>; }
            set { IsModified |= _<%= $column.Name | Camel %> != value; _<%= $column.Name | Camel %> = value; }
        }
        private <%= $column | CsType %> _<%= $column.Name | Camel %>;
        
        <%- } -%>
        #endregion

        #region Foreign Key Properties
        
        <%- foreach ($fk in $foreign_keys) { -%>
        /////	<summary>
        /////	Gets / Sets the foreign key to '<%= $column.Name %>'
        /////	</summary>
        //public <%= ($fk.Name | Pascal) -replace 'Id$', '') %> <%= ($fk.Name | Pascal) -replace 'Id$', '') %>
        //{
        //	get
        //	{
        //		return _<%= ($fk.Name | Camel) -replace 'Id$', '') %>
        //	}
        //	internal set
        //	{
        //		_<%= ($fk.Name | Camel) -replace 'Id$', '') %> = value;
        //
        //		<%= $fk.Name | Pascal %> = value == null ? default(<%= $fk | CsType %>) : value.<%= $fk.Name | Pascal %>;
        //	}
        //}
        //private <%= ($fk.Name | Pascal) -replace 'Id$', '') %> _<%= ($fk.Name | Camel) -replace 'Id$', '') %>;
        
        <%- } -%>
        #endregion

        #region "When" Properties

        public override DateTime CreatedAt
        {
            get { return base.CreatedAt.EnsureUtc(); }
            set { base.CreatedAt = value.EnsureUtc(); }
        }

        public override DateTime? UpdatedAt
        {
            get { return base.UpdatedAt.EnsureUtc(); }
            set { base.UpdatedAt = value.EnsureUtc(); }
        }
        
        #endregion
    }
}